#region Copyright (c) 2016 Atif Aziz. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#endregion

// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// Generated: Wed, 22 Jun 2016 11:42:40 GMT

namespace DeJson
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Jayrock.Json;
    using Mannex.Collections.Generic;
    using MoreLinq;

    partial class JsonImport
    {
        static readonly Type[] GenericFuncDefinitions =
        {
            /* [ 1] */ typeof(Func<,>),
            /* [ 2] */ typeof(Func<,,>),
            /* [ 3] */ typeof(Func<,,,>),
            /* [ 4] */ typeof(Func<,,,,>),
            /* [ 5] */ typeof(Func<,,,,,>),
            /* [ 6] */ typeof(Func<,,,,,,>),
            /* [ 7] */ typeof(Func<,,,,,,,>),
            /* [ 8] */ typeof(Func<,,,,,,,,>),
            /* [ 9] */ typeof(Func<,,,,,,,,,>),
            /* [10] */ typeof(Func<,,,,,,,,,,>),
            /* [11] */ typeof(Func<,,,,,,,,,,,>),
            /* [12] */ typeof(Func<,,,,,,,,,,,,>),
            /* [13] */ typeof(Func<,,,,,,,,,,,,,>),
            /* [14] */ typeof(Func<,,,,,,,,,,,,,,>),
            /* [15] */ typeof(Func<,,,,,,,,,,,,,,,>),
            /* [16] */ typeof(Func<,,,,,,,,,,,,,,,,>),
        };

        static Func<JsonReader, TResult> CreateImporter<T1, TResult>(
            IEnumerable<string> names,
            Func<JsonReader, T1> r1,
            Func<T1, TResult> selector)
        {
            var map = names.Index(1).ToDictionary(e => e.Value, e => e.Key, StringComparer.OrdinalIgnoreCase);
            return reader =>
            {
                var v1 = default(T1);

                using (var e = Members(reader))
                {
                    while (e.MoveNext())
                    {
                        switch (map.Find(e.Current))
                        {
                            case 1: v1 = r1(reader); break;
                            default: reader.Skip(); break;
                        }
                    }
                    return selector(v1);
                }
            };
        }

        static Func<JsonReader, TResult> CreateImporter<T1, T2, TResult>(
            IEnumerable<string> names,
            Func<JsonReader, T1> r1,
            Func<JsonReader, T2> r2,
            Func<T1, T2, TResult> selector)
        {
            var map = names.Index(1).ToDictionary(e => e.Value, e => e.Key, StringComparer.OrdinalIgnoreCase);
            return reader =>
            {
                var v1 = default(T1);
                var v2 = default(T2);

                using (var e = Members(reader))
                {
                    while (e.MoveNext())
                    {
                        switch (map.Find(e.Current))
                        {
                            case 1: v1 = r1(reader); break;
                            case 2: v2 = r2(reader); break;
                            default: reader.Skip(); break;
                        }
                    }
                    return selector(v1, v2);
                }
            };
        }

        static Func<JsonReader, TResult> CreateImporter<T1, T2, T3, TResult>(
            IEnumerable<string> names,
            Func<JsonReader, T1> r1,
            Func<JsonReader, T2> r2,
            Func<JsonReader, T3> r3,
            Func<T1, T2, T3, TResult> selector)
        {
            var map = names.Index(1).ToDictionary(e => e.Value, e => e.Key, StringComparer.OrdinalIgnoreCase);
            return reader =>
            {
                var v1 = default(T1);
                var v2 = default(T2);
                var v3 = default(T3);

                using (var e = Members(reader))
                {
                    while (e.MoveNext())
                    {
                        switch (map.Find(e.Current))
                        {
                            case 1: v1 = r1(reader); break;
                            case 2: v2 = r2(reader); break;
                            case 3: v3 = r3(reader); break;
                            default: reader.Skip(); break;
                        }
                    }
                    return selector(v1, v2, v3);
                }
            };
        }

        static Func<JsonReader, TResult> CreateImporter<T1, T2, T3, T4, TResult>(
            IEnumerable<string> names,
            Func<JsonReader, T1> r1,
            Func<JsonReader, T2> r2,
            Func<JsonReader, T3> r3,
            Func<JsonReader, T4> r4,
            Func<T1, T2, T3, T4, TResult> selector)
        {
            var map = names.Index(1).ToDictionary(e => e.Value, e => e.Key, StringComparer.OrdinalIgnoreCase);
            return reader =>
            {
                var v1 = default(T1);
                var v2 = default(T2);
                var v3 = default(T3);
                var v4 = default(T4);

                using (var e = Members(reader))
                {
                    while (e.MoveNext())
                    {
                        switch (map.Find(e.Current))
                        {
                            case 1: v1 = r1(reader); break;
                            case 2: v2 = r2(reader); break;
                            case 3: v3 = r3(reader); break;
                            case 4: v4 = r4(reader); break;
                            default: reader.Skip(); break;
                        }
                    }
                    return selector(v1, v2, v3, v4);
                }
            };
        }

        static Func<JsonReader, TResult> CreateImporter<T1, T2, T3, T4, T5, TResult>(
            IEnumerable<string> names,
            Func<JsonReader, T1> r1,
            Func<JsonReader, T2> r2,
            Func<JsonReader, T3> r3,
            Func<JsonReader, T4> r4,
            Func<JsonReader, T5> r5,
            Func<T1, T2, T3, T4, T5, TResult> selector)
        {
            var map = names.Index(1).ToDictionary(e => e.Value, e => e.Key, StringComparer.OrdinalIgnoreCase);
            return reader =>
            {
                var v1 = default(T1);
                var v2 = default(T2);
                var v3 = default(T3);
                var v4 = default(T4);
                var v5 = default(T5);

                using (var e = Members(reader))
                {
                    while (e.MoveNext())
                    {
                        switch (map.Find(e.Current))
                        {
                            case 1: v1 = r1(reader); break;
                            case 2: v2 = r2(reader); break;
                            case 3: v3 = r3(reader); break;
                            case 4: v4 = r4(reader); break;
                            case 5: v5 = r5(reader); break;
                            default: reader.Skip(); break;
                        }
                    }
                    return selector(v1, v2, v3, v4, v5);
                }
            };
        }

        static Func<JsonReader, TResult> CreateImporter<T1, T2, T3, T4, T5, T6, TResult>(
            IEnumerable<string> names,
            Func<JsonReader, T1> r1,
            Func<JsonReader, T2> r2,
            Func<JsonReader, T3> r3,
            Func<JsonReader, T4> r4,
            Func<JsonReader, T5> r5,
            Func<JsonReader, T6> r6,
            Func<T1, T2, T3, T4, T5, T6, TResult> selector)
        {
            var map = names.Index(1).ToDictionary(e => e.Value, e => e.Key, StringComparer.OrdinalIgnoreCase);
            return reader =>
            {
                var v1 = default(T1);
                var v2 = default(T2);
                var v3 = default(T3);
                var v4 = default(T4);
                var v5 = default(T5);
                var v6 = default(T6);

                using (var e = Members(reader))
                {
                    while (e.MoveNext())
                    {
                        switch (map.Find(e.Current))
                        {
                            case 1: v1 = r1(reader); break;
                            case 2: v2 = r2(reader); break;
                            case 3: v3 = r3(reader); break;
                            case 4: v4 = r4(reader); break;
                            case 5: v5 = r5(reader); break;
                            case 6: v6 = r6(reader); break;
                            default: reader.Skip(); break;
                        }
                    }
                    return selector(v1, v2, v3, v4, v5, v6);
                }
            };
        }

        static Func<JsonReader, TResult> CreateImporter<T1, T2, T3, T4, T5, T6, T7, TResult>(
            IEnumerable<string> names,
            Func<JsonReader, T1> r1,
            Func<JsonReader, T2> r2,
            Func<JsonReader, T3> r3,
            Func<JsonReader, T4> r4,
            Func<JsonReader, T5> r5,
            Func<JsonReader, T6> r6,
            Func<JsonReader, T7> r7,
            Func<T1, T2, T3, T4, T5, T6, T7, TResult> selector)
        {
            var map = names.Index(1).ToDictionary(e => e.Value, e => e.Key, StringComparer.OrdinalIgnoreCase);
            return reader =>
            {
                var v1 = default(T1);
                var v2 = default(T2);
                var v3 = default(T3);
                var v4 = default(T4);
                var v5 = default(T5);
                var v6 = default(T6);
                var v7 = default(T7);

                using (var e = Members(reader))
                {
                    while (e.MoveNext())
                    {
                        switch (map.Find(e.Current))
                        {
                            case 1: v1 = r1(reader); break;
                            case 2: v2 = r2(reader); break;
                            case 3: v3 = r3(reader); break;
                            case 4: v4 = r4(reader); break;
                            case 5: v5 = r5(reader); break;
                            case 6: v6 = r6(reader); break;
                            case 7: v7 = r7(reader); break;
                            default: reader.Skip(); break;
                        }
                    }
                    return selector(v1, v2, v3, v4, v5, v6, v7);
                }
            };
        }

        static Func<JsonReader, TResult> CreateImporter<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(
            IEnumerable<string> names,
            Func<JsonReader, T1> r1,
            Func<JsonReader, T2> r2,
            Func<JsonReader, T3> r3,
            Func<JsonReader, T4> r4,
            Func<JsonReader, T5> r5,
            Func<JsonReader, T6> r6,
            Func<JsonReader, T7> r7,
            Func<JsonReader, T8> r8,
            Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult> selector)
        {
            var map = names.Index(1).ToDictionary(e => e.Value, e => e.Key, StringComparer.OrdinalIgnoreCase);
            return reader =>
            {
                var v1 = default(T1);
                var v2 = default(T2);
                var v3 = default(T3);
                var v4 = default(T4);
                var v5 = default(T5);
                var v6 = default(T6);
                var v7 = default(T7);
                var v8 = default(T8);

                using (var e = Members(reader))
                {
                    while (e.MoveNext())
                    {
                        switch (map.Find(e.Current))
                        {
                            case 1: v1 = r1(reader); break;
                            case 2: v2 = r2(reader); break;
                            case 3: v3 = r3(reader); break;
                            case 4: v4 = r4(reader); break;
                            case 5: v5 = r5(reader); break;
                            case 6: v6 = r6(reader); break;
                            case 7: v7 = r7(reader); break;
                            case 8: v8 = r8(reader); break;
                            default: reader.Skip(); break;
                        }
                    }
                    return selector(v1, v2, v3, v4, v5, v6, v7, v8);
                }
            };
        }

        static Func<JsonReader, TResult> CreateImporter<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(
            IEnumerable<string> names,
            Func<JsonReader, T1> r1,
            Func<JsonReader, T2> r2,
            Func<JsonReader, T3> r3,
            Func<JsonReader, T4> r4,
            Func<JsonReader, T5> r5,
            Func<JsonReader, T6> r6,
            Func<JsonReader, T7> r7,
            Func<JsonReader, T8> r8,
            Func<JsonReader, T9> r9,
            Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult> selector)
        {
            var map = names.Index(1).ToDictionary(e => e.Value, e => e.Key, StringComparer.OrdinalIgnoreCase);
            return reader =>
            {
                var v1 = default(T1);
                var v2 = default(T2);
                var v3 = default(T3);
                var v4 = default(T4);
                var v5 = default(T5);
                var v6 = default(T6);
                var v7 = default(T7);
                var v8 = default(T8);
                var v9 = default(T9);

                using (var e = Members(reader))
                {
                    while (e.MoveNext())
                    {
                        switch (map.Find(e.Current))
                        {
                            case 1: v1 = r1(reader); break;
                            case 2: v2 = r2(reader); break;
                            case 3: v3 = r3(reader); break;
                            case 4: v4 = r4(reader); break;
                            case 5: v5 = r5(reader); break;
                            case 6: v6 = r6(reader); break;
                            case 7: v7 = r7(reader); break;
                            case 8: v8 = r8(reader); break;
                            case 9: v9 = r9(reader); break;
                            default: reader.Skip(); break;
                        }
                    }
                    return selector(v1, v2, v3, v4, v5, v6, v7, v8, v9);
                }
            };
        }

        static Func<JsonReader, TResult> CreateImporter<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult>(
            IEnumerable<string> names,
            Func<JsonReader, T1> r1,
            Func<JsonReader, T2> r2,
            Func<JsonReader, T3> r3,
            Func<JsonReader, T4> r4,
            Func<JsonReader, T5> r5,
            Func<JsonReader, T6> r6,
            Func<JsonReader, T7> r7,
            Func<JsonReader, T8> r8,
            Func<JsonReader, T9> r9,
            Func<JsonReader, T10> r10,
            Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, TResult> selector)
        {
            var map = names.Index(1).ToDictionary(e => e.Value, e => e.Key, StringComparer.OrdinalIgnoreCase);
            return reader =>
            {
                var v1 = default(T1);
                var v2 = default(T2);
                var v3 = default(T3);
                var v4 = default(T4);
                var v5 = default(T5);
                var v6 = default(T6);
                var v7 = default(T7);
                var v8 = default(T8);
                var v9 = default(T9);
                var v10 = default(T10);

                using (var e = Members(reader))
                {
                    while (e.MoveNext())
                    {
                        switch (map.Find(e.Current))
                        {
                            case 1: v1 = r1(reader); break;
                            case 2: v2 = r2(reader); break;
                            case 3: v3 = r3(reader); break;
                            case 4: v4 = r4(reader); break;
                            case 5: v5 = r5(reader); break;
                            case 6: v6 = r6(reader); break;
                            case 7: v7 = r7(reader); break;
                            case 8: v8 = r8(reader); break;
                            case 9: v9 = r9(reader); break;
                            case 10: v10 = r10(reader); break;
                            default: reader.Skip(); break;
                        }
                    }
                    return selector(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
                }
            };
        }

        static Func<JsonReader, TResult> CreateImporter<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult>(
            IEnumerable<string> names,
            Func<JsonReader, T1> r1,
            Func<JsonReader, T2> r2,
            Func<JsonReader, T3> r3,
            Func<JsonReader, T4> r4,
            Func<JsonReader, T5> r5,
            Func<JsonReader, T6> r6,
            Func<JsonReader, T7> r7,
            Func<JsonReader, T8> r8,
            Func<JsonReader, T9> r9,
            Func<JsonReader, T10> r10,
            Func<JsonReader, T11> r11,
            Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, TResult> selector)
        {
            var map = names.Index(1).ToDictionary(e => e.Value, e => e.Key, StringComparer.OrdinalIgnoreCase);
            return reader =>
            {
                var v1 = default(T1);
                var v2 = default(T2);
                var v3 = default(T3);
                var v4 = default(T4);
                var v5 = default(T5);
                var v6 = default(T6);
                var v7 = default(T7);
                var v8 = default(T8);
                var v9 = default(T9);
                var v10 = default(T10);
                var v11 = default(T11);

                using (var e = Members(reader))
                {
                    while (e.MoveNext())
                    {
                        switch (map.Find(e.Current))
                        {
                            case 1: v1 = r1(reader); break;
                            case 2: v2 = r2(reader); break;
                            case 3: v3 = r3(reader); break;
                            case 4: v4 = r4(reader); break;
                            case 5: v5 = r5(reader); break;
                            case 6: v6 = r6(reader); break;
                            case 7: v7 = r7(reader); break;
                            case 8: v8 = r8(reader); break;
                            case 9: v9 = r9(reader); break;
                            case 10: v10 = r10(reader); break;
                            case 11: v11 = r11(reader); break;
                            default: reader.Skip(); break;
                        }
                    }
                    return selector(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);
                }
            };
        }

        static Func<JsonReader, TResult> CreateImporter<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult>(
            IEnumerable<string> names,
            Func<JsonReader, T1> r1,
            Func<JsonReader, T2> r2,
            Func<JsonReader, T3> r3,
            Func<JsonReader, T4> r4,
            Func<JsonReader, T5> r5,
            Func<JsonReader, T6> r6,
            Func<JsonReader, T7> r7,
            Func<JsonReader, T8> r8,
            Func<JsonReader, T9> r9,
            Func<JsonReader, T10> r10,
            Func<JsonReader, T11> r11,
            Func<JsonReader, T12> r12,
            Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, TResult> selector)
        {
            var map = names.Index(1).ToDictionary(e => e.Value, e => e.Key, StringComparer.OrdinalIgnoreCase);
            return reader =>
            {
                var v1 = default(T1);
                var v2 = default(T2);
                var v3 = default(T3);
                var v4 = default(T4);
                var v5 = default(T5);
                var v6 = default(T6);
                var v7 = default(T7);
                var v8 = default(T8);
                var v9 = default(T9);
                var v10 = default(T10);
                var v11 = default(T11);
                var v12 = default(T12);

                using (var e = Members(reader))
                {
                    while (e.MoveNext())
                    {
                        switch (map.Find(e.Current))
                        {
                            case 1: v1 = r1(reader); break;
                            case 2: v2 = r2(reader); break;
                            case 3: v3 = r3(reader); break;
                            case 4: v4 = r4(reader); break;
                            case 5: v5 = r5(reader); break;
                            case 6: v6 = r6(reader); break;
                            case 7: v7 = r7(reader); break;
                            case 8: v8 = r8(reader); break;
                            case 9: v9 = r9(reader); break;
                            case 10: v10 = r10(reader); break;
                            case 11: v11 = r11(reader); break;
                            case 12: v12 = r12(reader); break;
                            default: reader.Skip(); break;
                        }
                    }
                    return selector(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
                }
            };
        }

        static Func<JsonReader, TResult> CreateImporter<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult>(
            IEnumerable<string> names,
            Func<JsonReader, T1> r1,
            Func<JsonReader, T2> r2,
            Func<JsonReader, T3> r3,
            Func<JsonReader, T4> r4,
            Func<JsonReader, T5> r5,
            Func<JsonReader, T6> r6,
            Func<JsonReader, T7> r7,
            Func<JsonReader, T8> r8,
            Func<JsonReader, T9> r9,
            Func<JsonReader, T10> r10,
            Func<JsonReader, T11> r11,
            Func<JsonReader, T12> r12,
            Func<JsonReader, T13> r13,
            Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, TResult> selector)
        {
            var map = names.Index(1).ToDictionary(e => e.Value, e => e.Key, StringComparer.OrdinalIgnoreCase);
            return reader =>
            {
                var v1 = default(T1);
                var v2 = default(T2);
                var v3 = default(T3);
                var v4 = default(T4);
                var v5 = default(T5);
                var v6 = default(T6);
                var v7 = default(T7);
                var v8 = default(T8);
                var v9 = default(T9);
                var v10 = default(T10);
                var v11 = default(T11);
                var v12 = default(T12);
                var v13 = default(T13);

                using (var e = Members(reader))
                {
                    while (e.MoveNext())
                    {
                        switch (map.Find(e.Current))
                        {
                            case 1: v1 = r1(reader); break;
                            case 2: v2 = r2(reader); break;
                            case 3: v3 = r3(reader); break;
                            case 4: v4 = r4(reader); break;
                            case 5: v5 = r5(reader); break;
                            case 6: v6 = r6(reader); break;
                            case 7: v7 = r7(reader); break;
                            case 8: v8 = r8(reader); break;
                            case 9: v9 = r9(reader); break;
                            case 10: v10 = r10(reader); break;
                            case 11: v11 = r11(reader); break;
                            case 12: v12 = r12(reader); break;
                            case 13: v13 = r13(reader); break;
                            default: reader.Skip(); break;
                        }
                    }
                    return selector(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
                }
            };
        }

        static Func<JsonReader, TResult> CreateImporter<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult>(
            IEnumerable<string> names,
            Func<JsonReader, T1> r1,
            Func<JsonReader, T2> r2,
            Func<JsonReader, T3> r3,
            Func<JsonReader, T4> r4,
            Func<JsonReader, T5> r5,
            Func<JsonReader, T6> r6,
            Func<JsonReader, T7> r7,
            Func<JsonReader, T8> r8,
            Func<JsonReader, T9> r9,
            Func<JsonReader, T10> r10,
            Func<JsonReader, T11> r11,
            Func<JsonReader, T12> r12,
            Func<JsonReader, T13> r13,
            Func<JsonReader, T14> r14,
            Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, TResult> selector)
        {
            var map = names.Index(1).ToDictionary(e => e.Value, e => e.Key, StringComparer.OrdinalIgnoreCase);
            return reader =>
            {
                var v1 = default(T1);
                var v2 = default(T2);
                var v3 = default(T3);
                var v4 = default(T4);
                var v5 = default(T5);
                var v6 = default(T6);
                var v7 = default(T7);
                var v8 = default(T8);
                var v9 = default(T9);
                var v10 = default(T10);
                var v11 = default(T11);
                var v12 = default(T12);
                var v13 = default(T13);
                var v14 = default(T14);

                using (var e = Members(reader))
                {
                    while (e.MoveNext())
                    {
                        switch (map.Find(e.Current))
                        {
                            case 1: v1 = r1(reader); break;
                            case 2: v2 = r2(reader); break;
                            case 3: v3 = r3(reader); break;
                            case 4: v4 = r4(reader); break;
                            case 5: v5 = r5(reader); break;
                            case 6: v6 = r6(reader); break;
                            case 7: v7 = r7(reader); break;
                            case 8: v8 = r8(reader); break;
                            case 9: v9 = r9(reader); break;
                            case 10: v10 = r10(reader); break;
                            case 11: v11 = r11(reader); break;
                            case 12: v12 = r12(reader); break;
                            case 13: v13 = r13(reader); break;
                            case 14: v14 = r14(reader); break;
                            default: reader.Skip(); break;
                        }
                    }
                    return selector(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14);
                }
            };
        }

        static Func<JsonReader, TResult> CreateImporter<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult>(
            IEnumerable<string> names,
            Func<JsonReader, T1> r1,
            Func<JsonReader, T2> r2,
            Func<JsonReader, T3> r3,
            Func<JsonReader, T4> r4,
            Func<JsonReader, T5> r5,
            Func<JsonReader, T6> r6,
            Func<JsonReader, T7> r7,
            Func<JsonReader, T8> r8,
            Func<JsonReader, T9> r9,
            Func<JsonReader, T10> r10,
            Func<JsonReader, T11> r11,
            Func<JsonReader, T12> r12,
            Func<JsonReader, T13> r13,
            Func<JsonReader, T14> r14,
            Func<JsonReader, T15> r15,
            Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, TResult> selector)
        {
            var map = names.Index(1).ToDictionary(e => e.Value, e => e.Key, StringComparer.OrdinalIgnoreCase);
            return reader =>
            {
                var v1 = default(T1);
                var v2 = default(T2);
                var v3 = default(T3);
                var v4 = default(T4);
                var v5 = default(T5);
                var v6 = default(T6);
                var v7 = default(T7);
                var v8 = default(T8);
                var v9 = default(T9);
                var v10 = default(T10);
                var v11 = default(T11);
                var v12 = default(T12);
                var v13 = default(T13);
                var v14 = default(T14);
                var v15 = default(T15);

                using (var e = Members(reader))
                {
                    while (e.MoveNext())
                    {
                        switch (map.Find(e.Current))
                        {
                            case 1: v1 = r1(reader); break;
                            case 2: v2 = r2(reader); break;
                            case 3: v3 = r3(reader); break;
                            case 4: v4 = r4(reader); break;
                            case 5: v5 = r5(reader); break;
                            case 6: v6 = r6(reader); break;
                            case 7: v7 = r7(reader); break;
                            case 8: v8 = r8(reader); break;
                            case 9: v9 = r9(reader); break;
                            case 10: v10 = r10(reader); break;
                            case 11: v11 = r11(reader); break;
                            case 12: v12 = r12(reader); break;
                            case 13: v13 = r13(reader); break;
                            case 14: v14 = r14(reader); break;
                            case 15: v15 = r15(reader); break;
                            default: reader.Skip(); break;
                        }
                    }
                    return selector(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
                }
            };
        }

        static Func<JsonReader, TResult> CreateImporter<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult>(
            IEnumerable<string> names,
            Func<JsonReader, T1> r1,
            Func<JsonReader, T2> r2,
            Func<JsonReader, T3> r3,
            Func<JsonReader, T4> r4,
            Func<JsonReader, T5> r5,
            Func<JsonReader, T6> r6,
            Func<JsonReader, T7> r7,
            Func<JsonReader, T8> r8,
            Func<JsonReader, T9> r9,
            Func<JsonReader, T10> r10,
            Func<JsonReader, T11> r11,
            Func<JsonReader, T12> r12,
            Func<JsonReader, T13> r13,
            Func<JsonReader, T14> r14,
            Func<JsonReader, T15> r15,
            Func<JsonReader, T16> r16,
            Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, TResult> selector)
        {
            var map = names.Index(1).ToDictionary(e => e.Value, e => e.Key, StringComparer.OrdinalIgnoreCase);
            return reader =>
            {
                var v1 = default(T1);
                var v2 = default(T2);
                var v3 = default(T3);
                var v4 = default(T4);
                var v5 = default(T5);
                var v6 = default(T6);
                var v7 = default(T7);
                var v8 = default(T8);
                var v9 = default(T9);
                var v10 = default(T10);
                var v11 = default(T11);
                var v12 = default(T12);
                var v13 = default(T13);
                var v14 = default(T14);
                var v15 = default(T15);
                var v16 = default(T16);

                using (var e = Members(reader))
                {
                    while (e.MoveNext())
                    {
                        switch (map.Find(e.Current))
                        {
                            case 1: v1 = r1(reader); break;
                            case 2: v2 = r2(reader); break;
                            case 3: v3 = r3(reader); break;
                            case 4: v4 = r4(reader); break;
                            case 5: v5 = r5(reader); break;
                            case 6: v6 = r6(reader); break;
                            case 7: v7 = r7(reader); break;
                            case 8: v8 = r8(reader); break;
                            case 9: v9 = r9(reader); break;
                            case 10: v10 = r10(reader); break;
                            case 11: v11 = r11(reader); break;
                            case 12: v12 = r12(reader); break;
                            case 13: v13 = r13(reader); break;
                            case 14: v14 = r14(reader); break;
                            case 15: v15 = r15(reader); break;
                            case 16: v16 = r16(reader); break;
                            default: reader.Skip(); break;
                        }
                    }
                    return selector(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
                }
            };
        }
    }
}
