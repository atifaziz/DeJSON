<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Globalization" #>
<#@ output extension=".cs" #>
#region Copyright (c) 2016 Atif Aziz. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#endregion

// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// Generated: <#= DateTimeOffset.Now.ToString("r") #>

<#
    var arities =
        Enumerable
            .Range(1, 16)
            .Select(len =>
                Enumerable
                    .Range(1, len)
                    .Select(n => n.ToString(CultureInfo.InvariantCulture))
                    .ToArray())
            .ToArray();
#>
namespace DeJson
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Jayrock.Json;
    using Mannex.Collections.Generic;
    using MoreLinq;

    partial class JsonImport
    {
        static readonly Type[] GenericFuncDefinitions =
        {
<#  foreach (var ns in arities) { #>
            /* [<#= ns.Length.ToString(CultureInfo.InvariantCulture).PadLeft(2) #>] */ typeof(Func<<#= string.Concat(Enumerable.Repeat(",", ns.Length)) #>>),
<#  }#>
        };
<#  foreach (var ns in arities) { #>

        static Func<JsonReader, TResult> CreateImporter<<#= string.Join(", ", from n in ns select "T" + n) #>, TResult>(
            IEnumerable<string> names,
<#      foreach (var n in ns) { #>
            Func<JsonReader, T<#= n #>> r<#= n #>,
<#      } #>
            Func<<#= string.Join(", ", from n in ns select "T" + n) #>, TResult> selector)
        {
            var map = names.Index(1).ToDictionary(e => e.Value, e => e.Key, StringComparer.OrdinalIgnoreCase);
            return reader =>
            {
<#      foreach (var n in ns) { #>
                var v<#= n #> = default(T<#= n #>);
<#      } #>

                using (var e = Members(reader))
                {
                    while (e.MoveNext())
                    {
                        switch (map.Find(e.Current))
                        {
<#      foreach (var n in ns) { #>
                            case <#= n #>: v<#= n #> = r<#= n #>(reader); break;
<#      } #>
                            default: reader.Skip(); break;
                        }
                    }
                    return selector(<#= string.Join(", ", from n in ns select "v" + n) #>);
                }
            };
        }
<#  }#>
    }
}
